@page "/"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable


<PageTitle>SignalR Chat</PageTitle>
<h3>SignalR Chat</h3>

@if (!IsConnected)
{
    <div class="input-group">
        <input @bind="_username" class="form-control" placeholder="What's your name?">
        <button class="btn btn-primary form-control-append" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <textarea style="width: 100%; height: 500px;">
        @_messages
    </textarea>
    <div class="input-group">
        <input @bind-value="_message"
                @bind-value:event="oninput"
                @onkeyup="HandleInput"
                class="form-control"/>
        <button class="btn btn-primary form-group-append"
            @onclick="Send"
            disabled="@(!IsConnected)">
        Send</button>
    </div>
}

@code{
    private HubConnection? _hubConnection;
    private string _messages = string.Empty;
    private string _username = string.Empty;
    private string _message = string.Empty;

    private async Task Connect()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        _hubConnection.On<string, string>("GetMessage", (user, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {message}";

            _messages += msg + "\n";

            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if(_hubConnection != null)
        {
            await _hubConnection.SendAsync("AddMessageToChat", _username, _message);
            _message = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if(args.Key == null || args.Key.Equals("Enter"))
        {
            await Send();
        }
    }

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if(_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}